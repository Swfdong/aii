package aii.ui.styles {	import aii.utils.ObjectUtil;
	/**	 * Style类为组件提供了样式支持。	 * @author Swfdong	 */	dynamic public class Style{		/**		 * 边框圆角。		 * @default 8		 */		public var borderRadius:uint=8;		/**		 * 边框粗细。		 * @default 1		 */		public var borderWeight:uint=1;		/**		 * 边框填充。		 * @default 0xABAEB4		 */		public var borderColor:uint=0xABAEB4;		/**		 * 内容填充。		 * @default 0xFFFFFF		 */		public var fillColor:uint=0xFFFFFF;		/**		 * 整体滤镜。		 * @default null		 */		public var filters:Array;		/**		 * 背景图像。		 * @default null		 */		public var image:Class;		/**		 * 图标。		 * @default null		 */		public var icon:Class;		/**		 * 文本颜色。		 * @default 0x666666;		 */		public var fontColor:uint=0x666666;		/**		 * 文本字号。		 * @default 12		 */		public var fontSize:uint=12;		/**		 * 文本滤镜。		 * @default null		 */		public var fontFilters:Array;				protected var _active:Object={};		protected var _hover:Object={};		protected var _disabled:Object={};		protected var stateMap:Array=[null,_hover,_active,_disabled];		/**		 * 创建新的样式对象。		 * @param args 用于样式属性的对象。		 */		public function Style(args:Object = null):void {			stateMap[0]=this;			if (args != null) {				setStyles(args);			}		}		/**		 *批量设置Style对象的属性。		 * @param args 用于样式属性的对象。		 */		public function setStyles(args:Object):void {			ObjectUtil.mergeTo(this, args);		}		/**		 * @param name 		 * @param state		 * @return 		 */		public function getStyle(name:String, state:uint):* {			var obj:Object = stateMap[state];			if (name in obj) {				return obj[name];			}else{				return this[name];			}		}		/**		 * @return 当前样式的active对象。		 */		public function get active():Object {			return _active;		}		/**		 * 设置当前样式的active属性（将新属性合并到原有属性），active属性包含了UI组件激活状态的样式（对于按钮形式的组件来说，鼠标经过按钮时的样式也由此属性设定）。		 * @param value		 */		public function set active(value:Object):void {			ObjectUtil.mergeTo(_active, value);		}		/**		 * @return 当前样式的hover属性。		 */		public function get hover():Object {			return _hover;		}		/**		 *设置当前样式的hover属性（将新属性合并到原有属性），hover属性包含了UI组件停留状态的样式（对于按钮形式的组件来说，鼠标按下按钮时的样式也由此属性设定）。		 * @param value		 */		public function set hover(value:Object):void {			ObjectUtil.mergeTo(_hover, value);		}		/**		 * @return 当前样式的disabled属性。		 */		public function get disabled():Object {			return _disabled;		}		/**		 * 设置当前样式的disabled属性（将新属性合并到原有属性），disabled属性包含了UI组件禁用状态时的样式。		 * @param value		 */		public function set disabled(value:Object):void {			ObjectUtil.mergeTo(_active, value);		}	}}