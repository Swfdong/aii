/*** * @author Swfdong * Aii组件基类 */package aii.ui.core {	import aii.ui.managers.InstanceManager;	import aii.ui.managers.SkinManager;	import aii.ui.managers.StyleManager;	import aii.ui.skins.ISkin;	import aii.ui.styles.*;	import aii.utils.ObjectUtil;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.IBitmapDrawable;	import flash.display.Loader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;

	public class UIComponent extends EventDispatcher {		//属性		public static var defaultStyle:Object = null;		protected var _ui:ISkin;		protected var _style:Style;		protected var _styleObject:Object={};		protected var _container:IBitmapDrawable;		protected var _width:Number=0;		protected var _height:Number=0;		protected var _enabled:Boolean = true;		protected var _tip:String; //提示		protected var _defaultHandler:Function;		protected var invalidType:uint = 255; //重绘类型		//构造		public function UIComponent(args:Object):void {			initialize(args);		}		////////////////////////////////////////////////////////////		//                    初始化相关方法		////////////////////////////////////////////////////////////		//初始化		protected function initialize(args:Object):void {				_style = StyleManager.getDefaultStyle(this); //获取样式				setProperties(args);				initializeCommon();		}		//初始化内容		private function initializeCommon():void {			//focusRect = false;			_ui = SkinManager.getDefaultSkin(this);			if(_container!=null){				addTo(_container);			}			config();		}		//配置		protected function config():void {		}		//配置事件		protected function configEvents():void {		}		protected function removeEvents():void {		}		//属性批量赋值		public function setProperties(args:Object):void {			ObjectUtil.mergeTo(this,args);		}		////////////////////////////////////////////////////////////		//                        公有方法		////////////////////////////////////////////////////////////		//添加至容器		public function addTo(container:IBitmapDrawable):Boolean {			if(container is DisplayObjectContainer&&!(container is Loader)){				var doContainer:DisplayObjectContainer=container as DisplayObjectContainer;				var displayObject:DisplayObject=_ui as DisplayObject;			try {				doContainer.addChild(displayObject);				return true;			} catch (e:Error) {			}			}			return false;		}		//从容器中移除		public function removeFormParent():void {		//	_parent.removeChild(_ui);		}		//移动		public function move(xvalue:int, yvalue:int):void {			x = xvalue;			y = yvalue;		}		public function resize(wvalue:Number, hvalue:Number):void {			_width = wvalue > 1 ? wvalue >> 0 : _width;			_height = hvalue > 1 ? hvalue >> 0 : _height;		}		//重绘		public function drawNow(type:uint = 255):void {			invalidType = type;			draw();		}		public function refreshStyle():void{					}		////////////////////////////////////////////////////////////		//                        私有方法		////////////////////////////////////////////////////////////		protected function draw():void {		}		protected function enabledChange():void {		}		////////////////////////////////////////////////////////////		//                     Getter&Setter		////////////////////////////////////////////////////////////		//可用性		public function set enabled(value:Boolean):void {			if (_enabled != value) {				_enabled = value;				if (_enabled) {					_ui.state = 0;					configEvents();				} else {					_ui.state = 3;					removeEvents();				}				enabledChange();			}		}		public function get enabled():Boolean {			return _enabled;		}		//默认处理		public function set defaultHandler(value:Function):void {			_defaultHandler = value;		}		public function get defaultHandler():Function {			return _defaultHandler;		}		//样式		public function set style(value:Object):void {			if (_styleObject != value) {				ObjectUtil.mergeTo(_styleObject,value);				_style=new Style(_style);				_style.setStyles(_styleObject);			}		}		public function get style():Object{			return _styleObject;		}		//提示		public function set tip(value:String):void {			_tip = value;		}		public function get tip():String {			return _tip;		}		//位置		public function set x(value:Number):void {			_ui.x = value >> 0;		}		public function set y(value:Number):void {			_ui.y = value >> 0;		}		//宽度		public function set width(value:Number):void {			_ui.resize(value, _height);		}		public function get width():Number {			return _width;		}		//高度		public function set height(value:Number):void {			_ui.resize(_width, value);		}		public function get height():Number {			return _height;		}		public function set container(value:IBitmapDrawable):void{			if(_container!=value){				_container=value;			}		}	}}