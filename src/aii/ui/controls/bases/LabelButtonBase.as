/*** * @author Swfdong * Aii标签按钮组件 */package aii.ui.controls.bases {	import aii.ui.core.*;	import aii.ui.factory.TextFactory;	import aii.ui.managers.TextManager;		import flash.events.FocusEvent;	import flash.events.KeyboardEvent;	import flash.text.TextField;	import flash.ui.Keyboard;	
	public class LabelButtonBase extends ButtonBase{		//私有属性		protected var textField:TextField;		protected var _label:String = "";
		//构造		public function LabelButtonBase(args:Object = null):void {			super(args);		}		//创建组件子对象		override protected function createChildren():void {			super.createChildren();			textField = TextFactory.createTextField();		}
		// 配置组件杂项		override protected function config():void {			textField.text=_label;			if (_width==0) {				textField.autoSize="left";				setWidthByLabel();			}			addChild(textField);		}		/**		 * 设定默认宽度。		 */		protected function setWidthByLabel():void {			_width = textField.width + 12;			textField.autoSize="none";		}
		//配置侦听		override protected function configEvents():void {			super.configEvents();			addEventListener(FocusEvent.FOCUS_IN, focusEventHandler, false, 0, true);			addEventListener(FocusEvent.FOCUS_OUT, focusEventHandler, false, 0, true);		}
		override protected function removeEvents():void {			super.removeEvents();			removeEventListener(FocusEvent.FOCUS_IN, focusEventHandler);			removeEventListener(FocusEvent.FOCUS_OUT, focusEventHandler);		}
		//焦点响应		protected function focusEventHandler(event:FocusEvent):void {			if (event.type == FocusEvent.FOCUS_IN) {				state = 1;				addEventListener(KeyboardEvent.KEY_DOWN, keyEventHandler, false, 0, true);				addEventListener(KeyboardEvent.KEY_UP, keyEventHandler, false, 0, true);			} else if (event.type == FocusEvent.FOCUS_OUT) {				state = 0;				removeEventListener(KeyboardEvent.KEY_DOWN, keyEventHandler);				removeEventListener(KeyboardEvent.KEY_UP, keyEventHandler);			}			invalidate();		}
		//键盘响应		protected function keyEventHandler(event:KeyboardEvent):void {			if (event.keyCode == Keyboard.ENTER || event.keyCode == Keyboard.SPACE) {				if (event.type == KeyboardEvent.KEY_DOWN) {					state = 2;				} else {					state = 1;					handleClick();				}				invalidate(InvalidationType.STATE);			}			handleKeyDown(event);		}
		//按键处理		protected function handleKeyDown(event:KeyboardEvent):void {
		}
		//重绘		override protected function draw():void {			buttonMode = _enabled;			if (invalidType & InvalidationType.STATE_OR_SIZE) {				drawButtonGraphic();				//状态改变				if (invalidType & InvalidationType.STATE) {					ui.filters = _style.getStyle("filters",state);					//textField.filters = _style.getStyle("filters",state);					TextManager.setSize(textField, _style.getStyle("fontSize",state));					TextManager.setColor(textField, _style.getStyle("fontColor",state));				}				//尺寸改变				if (invalidType & InvalidationType.SIZE) {					drawTextLayout();				}			}			//文字改变			if(invalidType & InvalidationType.TEXT){				textField.text = _label;			}		}
		//绘制文本		protected function drawTextLayout():void {			textField.width = _width - 4;			textField.y = (_height - textField.height) >> 1;			textField.x = (_width - textField.width) >> 1;		}
		//标签文字		public function get label():String {			return _label;		}
		public function set label(value:String):void {			if (_label != value) {				_label = value;				invalidate(InvalidationType.TEXT);			}		}	}}