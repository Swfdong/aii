 /*   Author:Swfdong   All comments are written in Chinese   Aii单选框组件 */package aii.ui.controls {	import aii.ui.core.*;	import aii.ui.styles.Style;		import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.ui.Keyboard;
	public class RadioButton extends CheckBox {		public static const defaultStyle:Object = {borderRadius:24};		protected static const GROUPS:Vector.<RadioButton> = new Vector.<RadioButton>();		protected static var CURRENT_GROUP:String;		protected var _group:String = "default";
		//构造		public function RadioButton(args:Object=null):void {			tabEnabled = false;			super(args);		}
		//配置		override protected function config():void {			super.config();			if (!hasGroup(_group)) {				selected = true;			}			GROUPS.push(this);		}
		//鼠标按下		override protected function handleDown(event:MouseEvent):void {			CURRENT_GROUP = _group;		}
		//鼠标经过		override protected function handleOver(event:MouseEvent):void {			if (CURRENT_GROUP == _group) {				_selected = tabEnabled = true;				resetGroupButtons(this);				if (event.type == MouseEvent.MOUSE_UP) {					CURRENT_GROUP = null;				}			}		}
		//鼠标外部释放		override protected function handleUpOutside(event:MouseEvent):void {			CURRENT_GROUP = null;		}
		//鼠标点击		override protected function handleClick():void {			selected = true;			if (_defaultHandler != null) {				_defaultHandler();			}		}
		//按键处理		override protected function handleKeyDown(event:KeyboardEvent):void {			if (event.type == KeyboardEvent.KEY_DOWN && (event.keyCode == Keyboard.UP || event.keyCode == Keyboard.DOWN || event.keyCode == Keyboard.LEFT || event.keyCode == Keyboard.RIGHT)) {				var btn:RadioButton;				if (event.keyCode == Keyboard.UP || event.keyCode == Keyboard.LEFT) {					btn = getNextButton(this, -1);				} else if (event.keyCode == Keyboard.DOWN || event.keyCode == Keyboard.RIGHT) {					btn = getNextButton(this, 1);				}				btn.selected = true;				stage.focus = btn;			}		}
		protected static function getNextButton(component:RadioButton, offset:int):RadioButton {			var i:int = GROUPS.indexOf(component);			var l:uint = GROUPS.length - 1;			while (true) {				i += offset;				if (offset > 0 && i > l) {					i = 0;				} else if (offset < 0 && i < 0) {					i = l;				}				if ((GROUPS[i].group == component.group) && GROUPS[i].enabled) {					return GROUPS[i];				}			}			return component;		}
		//重置按钮组		protected static function resetGroupButtons(component:RadioButton):void {			var len:uint = GROUPS.length;			for (var i:uint = 0; i < len; i += 1) {				if (GROUPS[i] != component && GROUPS[i].group == component.group) {					GROUPS[i].selected = false;				}			}		}
		//检查是否有某组		public static function hasGroup(name:String):Boolean {			var len:uint = GROUPS.length;			for (var i:uint = 0; i < len; i++) {				if (GROUPS[i].group == name) {					return true;				}			}			return false;		}
		//单选组别		public function get group():String {			return _group;		}
		public function set group(value:String):void {			_group = value;		}
		//选中状态		override public function set selected(value:Boolean):void {			if (_selected != value) {				_selected = value;				tabEnabled = _selected;				if (_selected) {					resetGroupButtons(this);				}				invalidate(InvalidationType.STATE);			}		}	}}