/**  *Author:Swfdong  *All comments are written in Chinese  *Aii滑块组件 */package aii.ui.controls {	import aii.ui.controls.bases.ButtonBase;	import aii.ui.core.*;	import aii.ui.graphics.*;	import aii.ui.graphics.border.*;	import aii.ui.managers.StyleManager;		import flash.events.MouseEvent;

	/**	 * @author Swfdong	 */	public class Slider extends UIComponent {		/**		 * @default 		 */		public static const HORIZONTAL:Boolean = false;		/**		 * @default 		 */		public static const VERTICAL:Boolean = true;		//私有属性		protected var _orientation:Boolean = true;		protected var _lightStyle:Boolean = false;		protected var _trackClick:Boolean = true;		protected var _maximum:Number = 100;		protected var _minimum:Number = 0;		protected var _range:Number = 10;		protected var _pageSize:Number = 1;		protected var _value:Number = 0;		protected var trackButton:ButtonBase;		protected var thumbButton:ButtonBase;		protected var thumbOffset:Number;		/**		 * 创建一个新的滑块组件实例。		 * @param args 滑块组件的参数。		 */		public function Slider(args:Object=null):void {			_width = 12;			_height = 100;			super(args);		}
		//配置		override protected function config():void {			trackButton = new ButtonBase({width:_width, height:_height, parent:this, defaultHandler:trackButtonClick,pressRepeat:true,style:StyleManager.getStyleObjectByKey("SliderTrack")});			trackButton.useHandCursor = false;			thumbButton = new ButtonBase({width:(_orientation ? _width : _height),height: (_orientation ? _width : _height), parent:this});			ui.filters = _style.getStyle("filters",state);		}
		override protected function configEvents():void {			super.configEvents();			thumbButton.addEventListener(MouseEvent.MOUSE_DOWN, dragHandler, false, 0, true);		}
		override protected function removeEvents():void {			super.removeEvents();			thumbButton.removeEventListener(MouseEvent.MOUSE_DOWN, dragHandler);		}
		//侦听		protected function dragHandler(event:MouseEvent):void {			stage.addEventListener(MouseEvent.MOUSE_UP, dropHandler);			stage.addEventListener(MouseEvent.MOUSE_MOVE, slideHandler);			if (_orientation) {				thumbOffset = mouseY - thumbButton.y;			} else {				thumbOffset = mouseX - thumbButton.x;			}		}
		protected function dropHandler(event:MouseEvent):void {			stage.removeEventListener(MouseEvent.MOUSE_UP, dropHandler);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, slideHandler);		}
		protected function slideHandler(event:MouseEvent):void {			if (_orientation) {				thumbButton.y = Math.min(_height - thumbButton.height, Math.max(mouseY - thumbOffset, 0));				_value = thumbButton.y / (_height - thumbButton.height) * (_maximum - _minimum) + _minimum;			} else {				thumbButton.x = Math.min(_width - thumbButton.width, Math.max(mouseX - thumbOffset, 0));				_value = thumbButton.x / (_width - thumbButton.width) * (_maximum - _minimum) + _minimum;			}		}
		//轨迹侦听		protected function trackButtonClick():void {			if (_orientation) {				if (mouseY < thumbButton.y) {					_value = Math.max(_minimum, _value - _pageSize);				} else if (mouseY > (thumbButton.y + thumbButton.height)) {					_value = Math.min(_maximum, _value + _pageSize);				}			} else {				if (mouseX < thumbButton.x) {					_value = Math.max(_minimum, _value - _pageSize);				} else if (mouseX > (thumbButton.x + thumbButton.width)) {					_value = Math.min(_maximum, _value + _pageSize);				}			}			invalidate(InvalidationType.SCROLL);		}
		//重绘		override protected function draw():void {			thumbButton.enabled = _enabled;			if (invalidType & InvalidationType.SIZE) {				trackButton.width = _width;				trackButton.height = _height;				if (_orientation) {					thumbButton.width = _width;					thumbButton.height = Math.max(_width, _range / (_maximum - _minimum) * _height);				} else {					thumbButton.height = _height;					thumbButton.width = Math.max(_height, _range / (_maximum - _minimum) * _width);				}			}			if (invalidType & InvalidationType.SCROLL) {				if (_orientation) {					thumbButton.y = (_value - _minimum) / (_maximum - _minimum) * (_height - thumbButton.height);				} else {					thumbButton.x = (_value - _minimum) / (_maximum - _minimum) * (_width - thumbButton.width);				}			}			thumbButton.validate();		}
		override protected function enabledChange():void {			thumbButton.enabled = trackButton.enabled = _enabled;		}
		//Getter&Setter		/**		 * @return 		 */		public function get orientation():Boolean {			return _orientation;		}
		/**		 * @param value		 */		public function set orientation(value:Boolean):void {			if (_orientation != value) {				//如果是默认宽高则根据方向调换宽高				if ((_orientation)) {					_width ^= _height;					_height ^=_width;					_width ^= _height;				}				_orientation = value;				invalidate();			}		}
		/**		 * @return 		 */		public function get trackClick():Boolean {			return _trackClick;		}
		/**		 * @param value		 */		public function set trackClick(value:Boolean):void {			if (_trackClick != value) {				_trackClick = value;				trackButton.enabled = _trackClick;			}		}		/**		 * 获取滑块组件的最大值。		 * @return 滑块组件的最大值。		 */		public function get maximum():Number {			return _maximum;		}
		/**		 * 设置滑块组件的最大值。		 * @param value 一个数字。		 */		public function set maximum(value:Number):void {			if (_maximum != value) {				_maximum = value;				invalidate();			}		}
		/**		 * 获取滑块组件的最小值。		 * @return 滑块组件的最小值。		 */		public function get minimum():Number {			return _minimum;		}
		/**		 * 设置滑块组件的最小值。		 * @param value 一个数字。		 */		public function set minimum(value:Number):void {			if (_minimum != value) {				_minimum = value;				invalidate();			}		}		/**		 * 获取滑块组件的当前值。		 * @return 滑块组件的当前值。		 */		public function get value():Number {			return _value;		}
		/**		 * 设置滑块组件的当前值。		 * @param value 一个数字。		 */		public function set value(value:Number):void {			value = Math.max(_minimum, Math.min(_maximum, value));			if (_value != value) {				_value = value;				invalidate(InvalidationType.SCROLL);			}		}		/**		 * 获取滑块组件的显示范围。		 * @return 滑块组件的显示范围。		 */		public function get range():Number {			return _range;		}
		/**		 * 设置滑块组件的显示范围。		 * @param value 一个数字。		 */		public function set range(value:Number):void {			value = Math.min(_maximum, value);			if (_range != value) {				_range = value;				invalidate();			}		}		/**		 * 获取滑块背景的样式。		 * @return 滑块背景的样式。		 */		public function get trackStyle():Object {			return trackButton.style;		}		/**		 * 设置滑块背景的样式。		 * @param value 样式对象。		 */		public function set trackStyle(value:Object):void {			if (trackButton.style!= value) {				trackButton.style = value;			}		}		/**		 * 获取滑块按钮的样式。		 * @return 滑块背景的样式。		 */		public function get thumbStyle():Object {			return thumbButton.style;		}		/**		 * 设置滑块按钮的样式。		 * @param value 样式对象。		 */		public function set thumbStyle(value:Object):void {			if (thumbButton.style!= value) {				thumbButton.style = value;			}		}	}}