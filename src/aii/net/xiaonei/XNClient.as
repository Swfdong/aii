/* license section

   Aii is free software: you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation, either version 3 of the License, or   (at your option) any later version.   Aii is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with Aii.  If not, see <http://www.gnu.org/licenses/>.   © Swfdong 2010 */ //核心连接类package aii.net.xiaonei {	import aii.net.events.RosterEvent;	import aii.net.events.XMPPEvent;	import aii.net.events.XNEvent;	import aii.net.xmpp.*;	import aii.utils.Logger;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.utils.getTimer;
	public final class XNClient extends EventDispatcher {		public static const WEB:String = "web";		public static const CLIENT:String = "client";		public static const MOBILE:String = "mobile";		private var _version:String = "Aii-XNClient-1.0";		private var _user:String;		private var _pwd:String;		private var _jid:JID;		private var _status:String;		private var _ticket:String;		private var _roster:XNRoster;		private var conn:XMPPConnection;		private var gadget:XNGadget;		private var mgadget:XNMobileGadget;
		//初始化		public function XNClient():void {			init();		}
		//[调试用]发送XML数据		public function sendXML(obj:*):void {			conn.sendXML(obj, false);		}
		//登录		public function login(user:String, pwd:String, stat:String = ""):void {			_user = user;			_pwd = pwd;			conn.login(user, pwd);			_status = stat;		}
		//修改状态		//更新好友状态		public function updateCard(s:String):void {			if (_roster.dataByJID[s] != undefined) {				var sIQ:IQ = new IQ(IQ.GET, s, null, IQTemplate.VCARD);				conn.send(sIQ);			}		}
		//获取好友资料		public function getInfo(card:XNCard, callback:Function):void {			gadget.getInfo(card.sid, callback);		}
		//跳转		public function redirect(link:String):void {			gadget.redirect(link);		}
		//储存资料		public function save():void {			_roster.save();		}
		public function get roster():XNRoster {			return _roster;		}
		public function get status():String {			return _status;		}
		/////////////////////私有方法//////////////////////////		//初始化		private function init():void {			conn = new XMPPConnection("talk.xiaonei.com", 5222);			gadget = new XNGadget();			mgadget = new XNMobileGadget();			_roster = new XNRoster();			configureXMPPListener();		}
		//XMPP连接侦听		private function configureXMPPListener():void {			//暂时只添加一个			conn.addEventListener(XMPPEvent.FEATURE, receivedFeature);			conn.addEventListener(XMPPEvent.FAILURE, loginFail);			conn.addEventListener(XMPPEvent.ERROR, loginError);		}
		/////////////////////////回调//////////////////////////		///////////////////////登录部分////////////////////////		//连接失败		private function loginError(e:XMPPEvent):void {			var err:XNEvent = new XNEvent(XNEvent.CONNECT_ERROR);			err.data = e.data;			dispatchEvent(err);		}
		//登录失败		private function loginFail(e:XMPPEvent):void {			var err:XNEvent = new XNEvent(XNEvent.LOGIN_FAILURE);			dispatchEvent(err);		}
		//开始发送IQ		private function receivedFeature(e:XMPPEvent):void {			var xe:XNEvent = new XNEvent(XNEvent.LOGIN_SUCCESS);			dispatchEvent(xe);			var sIQ:IQ = new IQ(IQ.SET, null, receivedJID, IQTemplate.RESOURCE, conn.resource);			conn.send(sIQ);		}
		//从服务器获取新JID&TICKET		private function receivedJID(xmlData:XML):void {			xmlData = xmlData.children()[0];			_jid = new JID(xmlData.children()[0]);			_roster.selfID = _jid.id;			var qn:QName = new QName("xiaonei:verify", "ticket");			_ticket = xmlData.attribute(qn);			gadget.ticket = _ticket;			mgadget.login(_user, _pwd);			//分配Ticket			var sIQ:IQ = new IQ(IQ.SET, null, receivedSession, IQTemplate.SESSION);			conn.send(sIQ);			Logger.log("[XNClient]与服务器绑定完毕，存根已获取");		}
		//收到Session		private function receivedSession(xmlData:XML):void {			var sIQ:IQ = new IQ(IQ.GET, _jid.jid, receivedCard, IQTemplate.VCARD);			conn.send(sIQ);		}
		//收到个人信息		private function receivedCard(xmlData:XML):void {			_roster.updateFromIQ(xmlData);			gadget.getFriendsList(receivedRoster);		}
		//收到用户列表		private function receivedRoster(objData:Object):void {			conn.iqDefaultHandler = receivedIQ;			conn.presenceHandler = receivedPresence;			conn.messageHandler = receivedMessage;			_roster.initFriends(objData);			Logger.log("[XNClient]好友列表获取完毕，共" + _roster.totalCount + "人");			var sPS:Presence = new Presence(_jid.jid, PresenceTemplate.LOGIN_SHOW, _status, _version);			conn.send(sPS);			//mgadget.updateStatus("再次测试XNClient模拟手机端发送状态～",null);			//conn.sendXML("<presence><status>测试机器人修改校内状态(name:Swfdong-Agent-1),现在还是人人桌面么?</status><c xmlns='http://jabber.org/protocol/caps' node='http://swfdong.org/' ver='Swfdong-Agent-1'/><x xmlns='vcard-temp:x:update'><photo/></x></presence>");		}
		private function receivedIQ(xmlData:XML):void {			_roster.updateFromIQ(xmlData);		}
		private function receivedPresence(xmlData:XML):void {			_roster.updateFromPresence(xmlData);		}
		private function receivedMessage(xmlData:XML):void {			var xe:XNEvent = new XNEvent(XNEvent.FEED);			dispatchEvent(xe);		}	}}