/* license section

   Aii is free software: you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation, either version 3 of the License, or   (at your option) any later version.   Aii is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with Aii.  If not, see <http://www.gnu.org/licenses/>.   © Swfdong 2010 */ /*AIR负载优化器,修改了包名和类名,并去掉了只在Mac上进行的设置 原作者:FramerateThrottler by Grant Skinner. May 9, 2009*/package aii.utils {	import flash.desktop.NativeApplication;	import flash.events.Event;
	public final class AIROptimizer {		private static var _activeFramerate:Number;		private static var _backgroundFramerate:Number;		private static var _active:Boolean = false;		private static var _enabled:Boolean = true;
		public static function init(backgroundFramerate:Number = 1, activeFramerate:Number = NaN):void {			var na:NativeApplication = NativeApplication.nativeApplication;			if (!isNaN(activeFramerate) && activeFramerate > 0) {				_activeFramerate = activeFramerate;			} else if (na.openedWindows.length > 0) {				_activeFramerate = na.openedWindows[0].stage.frameRate;			} else {				_activeFramerate = 12;			}			_backgroundFramerate = backgroundFramerate;			na.addEventListener(Event.DEACTIVATE, handleDeactivate);		}
		public static function set enabled(value:Boolean):void {			if (value == _enabled) {				return;			}			_enabled = value;			if (!_active && !_enabled) {				restoreFramerate();			} else if (!_active && _enabled) {				throttleFramerate();			}		}
		public static function get enabled():Boolean {			return _enabled;		}
		public static function get active():Boolean {			return _active;		}
		private static function restoreFramerate():void {			var na:NativeApplication = NativeApplication.nativeApplication;			if (na.openedWindows.length > 0) {				na.openedWindows[0].stage.frameRate = _activeFramerate;			}		}
		private static function throttleFramerate():void {			var na:NativeApplication = NativeApplication.nativeApplication;			if (na.openedWindows.length > 0) {				_activeFramerate = na.openedWindows[0].stage.frameRate;				na.openedWindows[0].stage.frameRate = _backgroundFramerate;			}		}		private static function handleDeactivate(evt:Event):void {			_active = false;			if (_enabled) {				throttleFramerate();			}			var na:NativeApplication = NativeApplication.nativeApplication;			na.removeEventListener(Event.DEACTIVATE, handleDeactivate);			na.addEventListener(Event.ACTIVATE, handleActivate);		}
		private static function handleActivate(evt:Event):void {			_active = true;			if (_enabled) {				restoreFramerate();			}			var na:NativeApplication = NativeApplication.nativeApplication;			na.removeEventListener(Event.ACTIVATE, handleActivate);			na.addEventListener(Event.DEACTIVATE, handleDeactivate);		}	}}